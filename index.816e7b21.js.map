{"mappings":"AAAA;AACA,MAAM,UAAU,SAAS,gBAAgB,CAAC;AAC1C,IAAI,iBAAe,SAAS,aAAa,CAAC;AAC1C,QAAQ,GAAG,CAAC;AACZ,MAAM,uBAAuB;AAC7B,IAAI,qBAAmB,KAAK;AAC5B,IAAI,eAAe;AACnB,IAAI,aAAa;AAEjB,SAAS,+BAA+B,SAAS,EAAE;IAE/C,SAAS,gBAAgB,CAAC,WAAW,SAAU,KAAK,EAAE;QAClD,IAAG,oBACC;QAEJ,IAAI,SAAS,MAAM,GAAG;QACtB,IAAI,WAAW,SAAS;YACpB,QAAQ,KAAK;YACb;QACJ,OAAO,IAAI,WAAW,aAClB;aACG,IAAI,SAAS,SAChB,UAAU,OAAO,WAAW;IAEpC;AACJ;AAEA,SAAS,UAAU,MAAM,EAAE;IAEvB,IAAI,aAAa,MAAM,GAAG,sBACtB,eAAe,eAAe;SAE9B,eAAe,aAAa,SAAS,CAAC,GAAG,aAAa,MAAM,GAAG,KAAK;IAExE,OAAO,CAAC,uBAAuB,aAAa,aAAa,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;AACrF;AAEA,SAAS,SAAS,MAAM,EAAE;IACtB,OAAO,aAAa,IAAI,CAAC;AAC7B;AAGA,SAAS,YAAY;IACjB,eAAe,aAAa,SAAS,CAAC,GAAG,aAAa,MAAM,GAAG;IAC/D,OAAO,CAAC,uBAAuB,aAAa,aAAa,MAAM,CAAC,CAAC,SAAS,GAAG;AACjF;AAEA,eAAe,uBAAuB;IAElC,QAAQ,IAAI;IACZ,IAAI,oBAAkB,aAAa,KAAK,CAAC;IAEzC,IAAI,aAAa,MAAM,KAAK,sBACxB,OAAO,MAAM;IAGjB,IAAI,oBAAoB,aAAa,KAAK,CAAC;IAC3C,MAAM,MAAM,eAAe;IAE3B,IAAK,IAAI,IAAI,GAAG,IAAI,sBAAsB,IAAK;QAC3C,IAAI,iBAAiB,CAAC,EAAE,KAAK,iBAAiB,CAAC,EAAE,EAAE;YAC/C,OAAO,CAAC,aAAa,uBAAuB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;YAC7D,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;QAC7B,OAAO,IAAI,kBAAkB,QAAQ,CAAC,iBAAiB,CAAC,EAAE,KAAK,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC,GAAG,GAAG;YAC1F,OAAO,CAAC,aAAa,uBAAuB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;YAC7D,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;QAC7B,OACI,OAAO,CAAC,aAAa,uBAAuB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;IAErE;IAEA;IAEA,IAAI,iBAAiB,cAAc;QAC/B,MAAM;QACN,qBAAmB,IAAI;QACvB;IACJ,OAAO,IAAI,eAAe,GAAG;QACzB,MAAM,CAAC,cAAc,EAAE,aAAa,CAAC;QACrC,qBAAqB;IACzB,CAAC;IACD,eAAe;AACnB;AAEA,SAAS,QAAQ,SAAS,EAAE;IACxB,eAAe,SAAS,CAAC,MAAM,CAAC,QAAO;AAC3C;AACA,QAAQ,IAAI;AAEZ,SAAS,eAAe,KAAK,EAAC;IAC1B,IAAI,SAAO,CAAC;IACZ,IAAI,IAAI,IAAE,GAAE,IAAE,sBAAqB,IAC/B,IAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EACf,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;SAEhB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,GAAC;IAGzB,OAAO;AACX;AAEA,+BAA+B","sources":["src/app.js"],"sourcesContent":["import ()\nconst letters = document.querySelectorAll('.boxes');\nlet spinnerElement=document.querySelector('.spinnerContainer');\nconsole.log(spinnerElement);\nconst originalStringLength = 5;\nlet afterGettingOutput=false;\nlet currentGuess = \"\";\nlet currentRow = 0;\n\nfunction fetchingAndAddingEventListener(addLetter) {\n\n    document.addEventListener('keydown', function (event) {\n        if(afterGettingOutput){\n            return;\n        }\n        let action = event.key;\n        if (action === 'Enter') {\n            spinner(false)\n            checkingAndComparing();\n        } else if (action === \"Backspace\") {\n            backSpace()\n        } else if (isLetter(action)) {\n            addLetter(action.toUpperCase());\n        }\n    });\n}\n\nfunction addLetter(letter) {\n\n    if (currentGuess.length < originalStringLength) {\n        currentGuess = currentGuess + letter;\n    } else {\n        currentGuess = currentGuess.substring(0, currentGuess.length - 1) + letter\n    }\n    letters[originalStringLength * currentRow + currentGuess.length - 1].innerText = letter;\n}\n\nfunction isLetter(letter) {\n    return /^[a-zA-z]$/.test(letter);\n}\n\n\nfunction backSpace() {\n    currentGuess = currentGuess.substring(0, currentGuess.length - 1);\n    letters[originalStringLength * currentRow + currentGuess.length].innerText = \"\";\n}\n\nasync function checkingAndComparing() {\n\n    spinner(true)\n    let obtainedWordSplit=obtainedWord.split(\"\");\n\n    if (currentGuess.length !== originalStringLength) {\n        return alert(\"please provide five letter words\");\n    }\n\n    let currentGuessSplit = currentGuess.split(\"\");\n    const map = toCheckDoubles(obtainedWordSplit);\n\n    for (let i = 0; i < originalStringLength; i++) {\n        if (currentGuessSplit[i] === obtainedWordSplit[i]) {\n            letters[currentRow * originalStringLength + i].classList.add('green');\n            map[currentGuessSplit[i]]--;\n        } else if (obtainedWordSplit.includes(currentGuessSplit[i]) && map[currentGuessSplit[i]] > 0) {\n            letters[currentRow * originalStringLength + i].classList.add('yellow');\n            map[currentGuessSplit[i]]--;\n        } else {\n            letters[currentRow * originalStringLength + i].classList.add('grey');\n        }\n    }\n\n    currentRow++;\n    \n    if (currentGuess === obtainedWord) {\n        alert(\"You Win\");\n        afterGettingOutput=true;\n        return;\n    } else if (currentRow === 6) {\n        alert(`you loose ans:${obtainedWord}`);\n        afterGettingOutput = done;\n    }\n    currentGuess = \"\";\n}\n\nfunction spinner(isLoading) {\n    spinnerElement.classList.toggle('show',isLoading);\n}\nspinner(true)\n\nfunction toCheckDoubles(array){\n    let object={};\n    for(let i=0;i<originalStringLength;i++){\n        if(object[array[i]]){\n            object[array[i]]++;\n        }else{\n            object[array[i]]=1;\n        }    \n    }\n    return object;\n}\n\nfetchingAndAddingEventListener(addLetter)\n"],"names":[],"version":3,"file":"index.816e7b21.js.map","sourceRoot":"/__parcel_source_root/"}